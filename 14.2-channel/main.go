package main

import (
    "fmt"
    "time"
)

/**
 * -------------------------------------------------------
 * 14.2 ゴルーチン間の通信 (チャンネル)
 * -------------------------------------------------------
 * ※ メッセージパッシング方式 -> 処理の間にある通信経路(チャンネル)を用いて値を送受信することで共有する方式
 * ※ 共有メモリ方式           -> 複数の処理の読み書きが可能な共有メモリを使用して共有する方式
 */
func main() {
    // 14.2.1 チャンネルによる送受信
    example21()

    // 14.2.2 バッファ付きチャンネル
    example22()

    // 14.2.3 チャンネルのクローズ
    example23()

    // 14.2.4 チャンネルのfor文
    example24()

    // 14.2.5 select文
    example25()
}

/**
 * -------------------------------------------------------
 * 14.2.1 チャンネルによる送受信 (同期)
 * -------------------------------------------------------
 * chan 要素の型            // 送受信可能なチャンネル型
 * chan<- 要素の型          // 送信のみのチャンネル型
 * <-chan 要素の型          // 受信のみのチャンネル型
 *
 * ※ チャンネル型は、参照型で、ゼロ値は、nilとなる
 * ※ チェンネルの値はmake関数で作成する
 *
 * make(チャンネル)         // バッファなしチャンネル (常に同期通信)
 * make(チャンネル, 容量)   // バッファ付きチャンネル (バッファ内に格納する値の数次第で非同期通信)
 *
 *                    ゴルーチン1                      ゴルーチン2
 *       <チャンネル送信> ｜                                ｜ <バッファから値を受信する>
 *          [ch <- 10] -> ｜                                ｜
 *   受信側がそろうまで ｜｜                                ｜
 *   送信側は待機する   ｜｜                                ｜
 *                      ↓｜ーーーーーーーーーーーーーーーー｜
 *      送信処理実行   -> ｜             [ 10 ]             ｜ <- n := <-ch (値10)
 *                        ｜ーーーーーーーーーーーーーーーー｜
 *                        ↓ 送受信がそろうと処理を実施する ↓
 *
 */
func example21() {
    ch := make(chan int)    // バッファなしチャンネル作成
    go funcSendSync(ch)     // ゴルーチン作成
    n := <-ch               // チャンネルによる受信

    fmt.Print("[受信 ", n, "]")
    fmt.Println()
}

// 送信側のゴルーチン用関数 (同期)
func funcSendSync(ch chan<- int) {
    fmt.Println("[送信 10]")
    ch <- 10 // チャンネルによる送信
}

/**
 * -------------------------------------------------------
 * 14.2.2 バッファ付きチャンネル (非同期)
 * -------------------------------------------------------
 * ※ 送信したい値をチャンネルのバッファ内に格納する
 * ※ 格納できる値の数は、作成時に指定した容量まで
 * ※ 受信した値は、バッファから取り除かれる
 */
func example22() {
    /**
     * バッファ付きチャンネル（容量3）の場合
     * ----------------------------------------------------------------------------------------------
     * ※ バッファに値を格納するため、受信側の処理を待たない
     *
     *                        ゴルーチン1                      ゴルーチン2
     *           <チャンネル送信> ｜        ----------------        ｜ <バッファから値を受信する>
     *                  (1ms待ち) ｜       ｜   バッファ   ｜       ｜ ｜(10ms待ち)
     *               [ch <- 1] -> ｜ ----->｜   [ 値1 ]    ｜       ｜ ｜
     *                  (1ms待ち) ｜       ｜              ｜       ｜ ｜
     *               [ch <- 2] -> ｜ ----->｜   [ 値2 ]    ｜       ｜ ｜
     *                  (1ms待ち) ｜       ｜              ｜       ｜ ｜
     *               [ch <- 3] -> ｜ ----->｜   [ 値3 ]    ｜       ｜ ↓
     *                            ｜       ｜              ｜-----> ｜ <- n := <-ch (値1)
     *                            ｜       ｜              ｜       ｜ ↓(10ms待ち)
     *                            ｜       ｜              ｜-----> ｜ <- n := <-ch (値2)
     *                            ｜       ｜              ｜       ｜ ↓(10ms待ち)
     *                            ｜       ｜              ｜-----> ｜ <- n := <-ch (値3)
     *                            ↓        ----------------        ↓
     *
     * ----------------------------------------------------------------------------------------------
     */
    fmt.Print("バッファ付き（容量3）：")
    ch1 := make(chan int, 3) // バッファ付きチャンネル作成
    go funcSendAsync(ch1)
    funcRecv(ch1)
    fmt.Println()

    /**
     * バッファ付きチャンネル（容量1）の場合
     * ----------------------------------------------------------------------------------------------
     * ※ バッファに値を格納するため、基本的には受信側の処理を待たないがバッファが空いていない場合は待つ
     *
     *                        ゴルーチン1                      ゴルーチン2
     *           <チャンネル送信> ｜        ----------------        ｜ <バッファから値を受信する>
     *                   (1ms待ち)｜       ｜   バッファ   ｜       ｜ ｜ (10ms待ち)
     *               [ch <- 1] -> ｜ ----->｜   [ 値1 ]    ｜       ｜ ｜
     *                   (1ms待ち)｜       ｜              ｜       ｜ ｜
     *               [ch <- 2] -> ｜ ---|  ｜              ｜       ｜ ↓
     *                  (空き待ち)｜    |  ｜              ｜-----> ｜ <- n := <-ch (値1)
     *                            ｜    -->｜   [ 値2 ]    ｜       ｜ ｜ (10ms待ち)
     *                   (1ms待ち)｜       ｜              ｜       ｜ ｜
     *               [ch <- 3] -> ｜ ---|  ｜              ｜       ｜ ｜
     *                  (空き待ち)｜    |  ｜              ｜       ｜ ↓
     *                            ｜    |  ｜              ｜-----> ｜ <- n := <-ch (値2)
     *                            ｜    -->｜   [ 値3 ]    ｜       ｜ ｜ (10ms待ち)
     *                            ｜       ｜              ｜       ｜ ↓
     *                            ｜       ｜              ｜-----> ｜ <- n := <-ch (値3)
     *                            ↓        ----------------        ↓
     *
     * ----------------------------------------------------------------------------------------------
     */
    fmt.Print("バッファ付き（容量1）：")
    ch2 := make(chan int, 1) // バッファ付きチャンネル作成
    go funcSendAsync(ch2)
    funcRecv(ch2)
    fmt.Println()

    /**
     * バッファなしチャンネルの場合
     * ----------------------------------------------------------------------------------------------
     * ※ バッファを利用しないため、同期処理となり受信するまで待つ
     *
     *                        ゴルーチン1                      ゴルーチン2
     *           <チャンネル送信> ｜                                ｜ <バッファから値を受信する>
     *                  (1ms待ち) ｜                                ｜ ｜(10ms待ち)
     *               [ch <- 1] -> ｜ ---|                           ｜ ↓
     *                            ｜    -->     [ 値1 ]      -----> ｜ <- n := <-ch (値1)
     *                  (1ms待ち) ｜                                ｜ ｜(10ms待ち)
     *               [ch <- 2] -> ｜ ---|                           ｜ ↓
     *                            ｜    -->     [ 値2 ]      -----> ｜ <- n := <-ch (値2)
     *                  (1ms待ち) ｜                                ｜ ｜(10ms待ち)
     *               [ch <- 3] -> ｜ ---|                           ｜ ↓
     *                            ｜    -->     [ 値3 ]      -----> ｜ <- n := <-ch (値3)
     *                            ↓                                ↓
     *
     * ----------------------------------------------------------------------------------------------
     */
    fmt.Print("バッファなし（容量0）：")
    ch3 := make(chan int) // バッファなしチャンネル作成
    go funcSendAsync(ch3)
    funcRecv(ch3)
    fmt.Println()
}

// 送信側のゴルーチン用関数 (非同期)
func funcSendAsync(ch chan<- int) {
    // 1ミリ秒ごとに値を3回送信する
    for n := 1; n <= 3; n++ {
        fmt.Print("(1ms待ち) ")
        time.Sleep(time.Millisecond) // 1ミリ秒待つ
        fmt.Print("送信:", n, "-> ")
        ch <- n                      // チャンネルによる送信
        fmt.Print("送信完了 ")
    }
}

// 受信側の関数
func funcRecv(ch <-chan int) {
    // 10ミリ秒ごとに値を3回受信する
    for n := 1; n <= 3; n++ {
        time.Sleep(10 * time.Millisecond) // 10ミリ秒待つ
        fmt.Print("受信:", <-ch, " ") // チャンネルによる受信
    }
}

/**
 * -------------------------------------------------------
 * 14.2.3 チャンネルのクローズ
 * -------------------------------------------------------
 */
func example23() {
    ch := make(chan int)  // チャンネル作成
    go funcSendClose(ch)  // ゴルーチン作成

    for {
        n, ok := <-ch // 受信処理とクローズの確認

        // チャンネルがクローズ済みの場合、ループ終了する
        if !ok {
            break
        }

        fmt.Println("受信:", n)
    }

    // クローズ済みの場合、ゼロ値を取得する
    fmt.Println("クローズ済:", <-ch)
}

// 値を3回送信した後、チャンネルをクローズする
func funcSendClose(ch chan<- int) {
    for n := 0; n < 3; n++ {
        ch <- n
    }

    close(ch) // チャンネルをクローズする
}

/**
 * -------------------------------------------------------
 * 14.2.4 チャンネルのfor文
 * -------------------------------------------------------
 */
func example24() {
    ch := make(chan int) // チャンネル作成
    go funcSendFor(ch)   // ゴルーチン作成

    // クローズするまでループする
    for n := range ch {
        fmt.Println("受信:", n)
    }
}

// 値を3回送信した後、チャンネルをクローズする
func funcSendFor(ch chan<- int) {
    for n := 0; n < 3; n++ {
        ch <- n
    }
    close(ch) // チャンネルをクローズする
}

/**
 * -------------------------------------------------------
 * 14.2.5 select文
 * -------------------------------------------------------
 * ※ select文は、複数のチャンネルに対して同時に送受信待ちや受信待ちを行うときに使用する
 * ※ break文は使用できる
 * ※ fallthrough文は使用できない
 *
 * [構造]
 *     select {
 *
 *     // 送信処理
 *     case チャンネル <- 値:
 *
 *     // 受信処理 (受信値を使用しない場合)
 *     case <-チャンネル:
 *
 *     // 受信処理 (受信値を変数に設定する場合)
 *     case 変数1 := <-チャンネル:
 *
 *     // 受信処理 (受信値とクローズの有無を変数に設定する場合)
 *     case 変数1, 変数2 := <-チャンネル:
 *
 *     // どの送受信処理も待機中になる場合
 *     default:
 *
 *     }
 */
func example25() {
    ch1 := make(chan string)
    ch2 := make(chan string)

    go func() { <-ch1 }()      // ch1受信処理
    funcSelect(ch1, ch2)       // ch1送信処理を選択

    go func() { ch2 <- "b" }() // ch2送信処理
    funcSelect(ch1, ch2)       // ch2受信処理を選択

    // 送受信がないため、defaultを選択
    funcSelectDefault(ch1, ch2)
}

// ch1の送信処理とch2の受信処理を行うselect文（デフォルトなし）
func funcSelect(ch1 chan<- string, ch2 <-chan string) {
    select {

    // ch1送信処理
    case ch1 <- "a":
        fmt.Println("[select ch1送信: a]")

    // ch2受信処理
    case n := <-ch2:
        fmt.Println("[select ch2受信:" + n + "]")

    }
}

func funcSelectDefault(ch1 chan<- string, ch2 <-chan string) {
    select {

    // ch1送信処理
    case ch1 <- "a":
        fmt.Println("[select ch1送信: a]")

    // ch2受信処理
    case n := <-ch2:
        fmt.Println("[select ch2受信:" + n + "]")

    // ch1の送信とch2の受信も実行できないケース
    default:
        fmt.Println("[select default]")

    }
}
